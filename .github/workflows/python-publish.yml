# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13.2"

      - name: Prepare env
        run: |
          python -m pip install poetry
          poetry self add poetry-dynamic-versioning

      - name: Install deps
        run: |
          pip install grpcio==1.72.0rc1
          pip install grpcio-tools==1.72.0rc1 # 解决版本问题
          ls ~/.local/bin
          /mnt/xdata/user/cxykevin/.local/bin/protoc-gen-grpclib_python
          poetry lock
          poetry install --with dev
          echo "Install grpcio"
          poetry env activate
          pip install grpcio==1.72.0rc1
          pip install grpcio-tools==1.72.0rc1 # 解决版本问题
          
      - name: Build
        run: |
          poetry env activate
          alias protoc-gen-grpclib_python='~/.local/bin/protoc-gen-grpclib_python'
          make proto_t
          poetry build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
